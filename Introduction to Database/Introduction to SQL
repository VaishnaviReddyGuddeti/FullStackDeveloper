* Introduction to SQL:

We have already learnt that databases and DBMS are key to organising and analysing data for business uses.
From here on, let’s get busy working around with databases using SQL! 
-SQL stands forStructured Query Language
-SQL is used to perform operations on Relational DBMS.
-SQL is declarative. Hence, easy to learn.

SQL provides multiple clauses (commands) to perform various operations like create, retrieve, update and delete the data.

The first step towards working with the database would be creating a table.

* Create Table
Creates a new table in the database.

Syntax : SQL 
CREATE TABLE table_name (
  column1 type1,
  column2 type2,
  ...
);
Here,type1andtype2in the syntax are the datatypes ofcolumn1andcolumn2respectively. Datatypes that are supported in SQL are mentioned below.

Example:Create aplayertable to store the following details of players.

column_name	 :  data_type
name	       :  VARCHAR(200)
age	         :  INT/INTEGER
score        :  INT/INTEGER

SQL : 
CREATE TABLE player (
  name VARCHAR(200),
  age INTEGER,
  score INTEGER
);

We can check the details of the created table at any point in time using thePRAGMAcommand (mentioned below).

* Try it Yourself!
Assume that we have to build a database that stores all the information about the students in a school, subjects, exam schedules, etc. Lets build a few tables to store the data!

1.Create astudenttable to store the following details of students.

details	          :     data_type
name	            :     VARCHAR(200)
date_of_birth     :     DATE
address	          :     TEXT

2. Create anexam_scheduletable to store the information about exams.

details	                     data_type
name	                       VARCHAR(200)
course	                     VARCHAR(200)
exam_date_time	             DATETIME
duration_in_sec	             INT
pass_percentage	             FLOAT


* Data Types:
Following data types are frequently used in SQL.

Data Type	                     Syntax
Integer                    	INTEGER / INT
Float	                      FLOAT
String	                    VARCHAR
Text	                      TEXT
Date	                      DATE
Time	                      TIME
Datetime	                  DATETIME
Boolean	                    BOOLEAN


Note:
1.Boolean values are stored as integers 0 (FALSE) and 1 (TRUE).
2.Date object is represented as: ‘YYYY-MM-DD’
3.Datetime object is represented as: ‘YYYY-MM-DD HH:MM:SS’

*PRAGMA:
  PRAGMA TABLE_INFO command returns the information about a specific table in a database.

Syntax:SQL
PRAGMA TABLE_INFO(table_name);

Example:
Let's find out the information of theemployeetable that's present in the database.
SQL:
PRAGMA TABLE_INFO(employee);

Note:
If the given table name does not exist,PRAGMA TABLE_INFOdoesn’t give any result.

*Inserting Rows:
 INSERTclause is used to insert new rows in a table.
Syntax:SQL
INSERT INTO
    table_name (column1, column2,..., columnN)
VALUES
    (value11, value12,..., value1N),
    (value21, value22,..., value2N),
    ...;
    
Any number of rows from 1 to n can be inserted into a specified table using the above syntax.

*Database:
Let's learn more about the INSERT clause by going hands-on on theplayerandmatch_detailstables that store the details of players and matches in a tournament respectively. 

-playertable stores the name, age and score of players.
-match_detailstable stores name of team, opponent team name, place, date and match result    

Example:
1.Insertname,ageandscore of 2 players in theplayertable.
SQL:
INSERT INTO
  player (name, age, score)
VALUES
  ("Rakesh", 39, 35),
  ("Sai", 47, 30);
Upon executing the above code, both the entries would be added to theplayertable.

Let's view the added data!
We can retrieve the inserted data by using the following command.
SQL:
SELECT *
FROM player;

We shall know more about retrieving data in further cheat sheets.

2.Similarly, let's insert the details of 2 matches in the match_details table.
SQL:
INSERT INTO
  match_details (team_name, played_with, venue, date, is_won)
VALUES
  ("CSK", "MI", "Chennai", "2020-04-21", true),
  ("SRH", "RR", "Hyderabad", "2020-04-23", true);
  
Note:
1.Boolean values can be either given as (TRUE or FALSE) or (1 or 0). But in the database, the values are stored as 1 or 0.
2.Date object is represented as: ‘YYYY-MM-DD’
3.Datetime object is represented as: ‘YYYY-MM-DD HH:MM:SS’

*Possible Mistakes
Mistake 1
The number of values that we're inserting must match with the number of column names that are specified in the query.

SQL:
INSERT INTO
  player(name, age, score)
VALUES
  ("Virat", 31);
Error: 2 values for 3 columns

Mistake 2
 We have to specify only the existing tables in the database.

SQL:
INSERT INTO
  players_information(name, age, score)
VALUES
  ("Virat", 31, 30);
Error: no such table: players_information

Mistake 3
 Do not add additional parenthesis()postVALUESkeyword in the code.

SQL:
INSERT INTO
  player (name, age, score)
VALUES
  (("Rakesh", 39, 35), ("Sai", 47, 30));
Error: 2 values for 3 columns

Mistake 4
While inserting data, be careful with the datatypes of the input values. Input value datatype should be same as the column datatype.

SQL:
INSERT INTO
  player(name, age, score)
VALUES
  ("Virat", 31, "Hundred");
  
  
*Retrieving Data
SELECTclause is used to retrieve rows from a table. 

Database:
The database consists of aplayertable that stores the details of players who are a part of a tournament.playertable stores the name, age and score of players.

Let's explore more about the SELECT clause using the database!

*Selecting Specific Columns:To retrieve the data of only specific columns from a table, add the respective column names in the SELECT clause.

Syntax
SQL:
  SELECT
  column1,
  column2,
  ...,
  columnN
FROM
  table_name;
  
Example:
Let's fetch thenameandageof the players from theplayertable.

SQL:
SELECT
  name,
  age
FROM
  player;

*Selecting All Columns:
Sometimes, we may want to select all the columns from a table. Typing out every column name, for every time we have to retrive the data, would be a pain.
We have a shortcut for this!

Syntax
SQL:
SELECT *
FROM table_name;

Example:
Get all the data of players from theplayertable.
SQL:
SELECT *
FROM player;

*Selecting Specific Rows
We use WHERE clause to retrieve only specific rows.

Syntax
SQL:
SELECT * 
FROM table_name
WHERE condition;
WHEREclause specifies a condition that has to be satisfied for retrieving the data from a database.

Example:
Getnameandageof the player whosenameis "Ram" from theplayertable.
SQL:
SELECT * 
FROM player 
WHERE name="Sai";

*Concepts in Focus
-Update Rows
-SQL – Case Insensitive

Database:
The database consists of aplayertable that stores the details of players who are a part of a tournament.playertable stores the name, age and score of players.

Update Rows:
UPDATEclause is used to update the data of an existing table in database. We can update all the rows or only specific rows as per the requirement.

Update All Rows
Syntax
SQL:
UPDATE
  table_name
SET
  column1 = value1;
  
Example:
Update thescoreof all players to 100 in theplayertable.

SQL:
UPDATE
  player
SET
  score = 100;
  
Update Specific Rows
Syntax
SQL:
UPDATE
  table_name
SET
  column1 = value1
WHERE
  column2 = value2;
  
Example
Update thescoreof "Ram" to 150 in theplayertable.

SQL:
UPDATE
  player
SET
  score = 150
WHERE
  name = "Ram";
  
*SQLite is Case Insensitive!:
Query 1
SQL:
SELECT
  *
FROM
  player;

Query 2
SQL:
select
  *
from
  player;
  
Note:
Best Practice: Both Query 1 and Query 2 gives the same output. But, it is recommended to write keywords in upper case to make the query more readable. 
Prefer Query 1 format over Query 2.

*Delete Rows
DELETEclause is used to delete existing records from a table.

Delete All Rows:
Syntax
SQL:
DELETE FROM
  table_name;

Example:
Delete all the rows from theplayertable. 

SQL:
DELETE FROM
  player;
  
*Delete Specific Rows
Syntax
SQL:
DELETE FROM
  table_name
WHERE
  column1 = value1;
  
Example
Delete "Shyam" from theplayertable.
Note: We can uniquely identify a player by name.
SQL:
DELETE FROM
  player
WHERE
  name = "Shyam";
  
Warning:
We can not retrieve the data once we delete the data from the table.

*Drop Table
DROPclause is used to delete a table from the database.

Syntax
SQL: DROP TABLE table_name;

Example:
Deleteplayertable from the database.

SQL:
DROP TABLE player;

*Alter Table:
ALTERclause is used to add, delete, or modify columns in an existing table.
Let's learn more about ALTER clause using the following database.

Database:
The database consists of aplayertable that stores the details of players who are a part of a tournament. playertable stores the name, age and score of players.

Add Column
Syntax
SQL:
ALTER TABLE
  table_name
ADD
  column_name datatype;
  
You can usePRAGMA TABLE_INFO(table_name)command to check the updated schema of the table.

Example:
Add a new columnjersey_numof typeintegerto theplayertable.

SQL:
ALTER TABLE
  player
ADD
  jersey_num INT;
  
Note : Default values for newly added columns in the existing rows will be NULL.

Rename Column:
Syntax
SQL:
ALTER TABLE
  table_name RENAME COLUMN c1 TO c2;
  
Example:
Rename the columnjersey_numin theplayertable tojersey_number.
SQL:
ALTER TABLE
  player RENAME COLUMN jersey_num TO jersey_number;

Drop Column:
Syntax
SQL:
ALTER TABLE
  table_name DROP COLUMN column_name;
  
Example:
Remove the columnjersey_numberfrom theplayertable.
SQL:
ALTER TABLE
  player DROP COLUMN jersey_number;

Note:
DROP COLUMN is not supported in some DBMS, including SQLite.


