JOINS:PART-1
So far, we have learnt to analyse the data that is present in a single table. But in the real-world scenarios, often, the data is distributed in multiple tables. To fetch meaningful insights, we have to bring the data together by combining the tables. 
We use JOIN clause to combine rows from two or more tables, based on a related column between them. There are various types of joins, namely Natural join, Inner Join, Full Join, Cross Join, Left join, Right join.

Let’s learn about them in detail using the following database.

Database:
Here, the database stores the data of students, courses, course reviews, instructors, etc., of an e-learning platform.

Natural JOIN:
NATURAL JOIN combines the tables based on the common columns.

Syntax:SQL
SELECT *
FROM table1
   NATURAL JOIN table2;
   
Example:
1.Fetch the details of courses that are being taught by "Alex".
Solving this problem involves querying on data stored in two tables, i.e.,course&instructor. Both the tables have common columninstructor_id. Hence, we use Natural Join.

SQL:
SELECT course.name,
  instructor.full_name
FROM course
  NATURAL JOIN instructor
WHERE instructor.full_name = "Alex";

INNER JOIN:
INNER JOIN combines rows from both the tables if they meet a specified condition.

Syntax:SQL
SELECT *
FROM table1
   INNER JOIN table2
ON table1.c1 = table2.c2;

Note:
We can use any comparison operator in the condition.
Example:
Get the reviews of course “Cyber Security” (course with id=15)

SQL:
SELECT student.full_name,
   review.content,
   review.created_at
FROM student
   INNER JOIN review 
ON student.id = review.student_id
WHERE review.course_id = 15;

LEFT JOIN:
InLEFT JOIN, for each row in the left table, matched rows from the right table are combined. If there is no match, NULL values are assigned to the right half of the rows in the temporary table.

Syntax:SQL
SELECT *
FROM table1
   LEFT JOIN table2 
ON table1.c1 = tabl2.c2;

Example:
Fetch the full_name of students who have not enrolled for any course

SQL:
SELECT student.full_name
FROM student
   LEFT JOIN student_course
ON student.id = student_course.student_id
WHERE student_course.id IS NULL;


Querying with Joins:
Database:
Here, the database stores the data of students, courses, course reviews, instructors, etc., of an e-learning platform.

Joins on Multiple Tables:
We can also perform join on a combined table.

Example:
Fetch all the students who enrolled for the courses taught by the instructor “Arun” (id = 102)
SQL:
SELECT T.name AS course_name,
   student.full_name
FROM (course
   INNER JOIN student_course
ON course.id = student_course.course_id) AS T
   INNER JOIN student
ON T.student_id = student.id
WHERE course.instructor_id = 102;

Note:
Best Practices
1.UseALIASto name the combined table.
2.Use alias table names to refer the columns in the combined table.

Using joins with other clauses:
We can apply WHERE,ORDER BY,HAVING,GROUP BY,LIMIT,OFFSETand other clauses (which are used for retrieving data tables) on the temporary joined table as well.

Example:
Get the name of the student who scored highest in "Machine Learning" course.

SQL:
SELECT student.full_name
FROM (course
   INNER JOIN student_course
ON course.id = student_course.course_id) AS T
   INNER JOIN student
ON T.student_id = student.id
WHERE course.name = "Machine Learning"
ORDER BY student_course.score DESC
LIMIT 1;

Using joins with aggregations:
We can apply WHERE, ORDER BY, HAVING, GROUP BY, LIMIT, OFFSET and other clauses (which are used for retrieving data tables) on the temporary joined table as well.

->Get the highest score in each course.
SQL:
SELECT
  course.name AS course_name,
  MAX(score) AS highest_score
FROM
  course
  LEFT JOIN student_course 
ON course.id = student_course.course_id
GROUP BY
  course.id;
  
JOINS Cont'd:
Database:
The database stores the data of students, courses, course reviews, instructors, etc., of an e-learning platform.

RIGHT JOIN:
RIGHT JOIN or RIGHT OUTER JOIN is vice versa of LEFT JOIN.
I.e., inRIGHT JOIN, for each row in the right table, matched rows from the left table are combined. If there is no match, NULL values are assigned to the left half of the rows in the temporary table.

Syntax:SQL
SELECT *
FROM table1
   RIGHT JOIN table2
ON table1.c1 = table2.c2;

Which is similar to 
SQL:
SELECT *
FROM table2
   LEFT JOIN table1
ON table1.c1 = table2.c2;

Example:
Following query performs RIGHT JOIN on course and instructor tables
SQL:
SELECT course.name,
    instructor.full_name
FROM course
   RIGHT JOIN instructor
ON course.instructor_id = instructor.instructor_id;

Note:
Right Join is not supported in some dbms(SQLite).

FULL JOIN:
FULL JOIN or FULL OUTER  JOIN is the result of both RIGHT JOIN and LEFT JOIN

Syntax:SQL
SELECT *
FROM table1
   FULL JOIN table2
ON c1 = c2;

Example:
Following query performs FULL JOIN ON course and instructor tables
SQL:
SELECT course.name,
    instructor.full_name
FROM course
   FULL JOIN instructor
ON course.instructor_id = instructor.instructor_id;

Note:
FULL JOIN is not supported in some dbms(SQLite).

CROSS JOIN:
In CROSS JOIN, each row from the first table is combined with all rows in the second table. 
Cross Join is also called as CARTESIAN JOIN

Syntax:SQL
SELECT *
FROM table1
   CROSS JOIN table2;
   
Example:
Following query performs CROSS JOIN on course and instructor tables
SQL:
SELECT course.name AS course_name,
    instructor.full_name AS instructor_name
FROM course
   CROSS JOIN instructor;
   
SELF JOIN:
So far, we have learnt to combine different tables. We can also combine a table with itself. This kind of join is called SELF-JOIN.

Syntax:SQL
SELECT t1.c1,
   t2.c2
FROM table1 AS t1
   JOIN table1 AS t2
ON t1.c1 = t2.cn;

Note:
We can use any JOIN clause in self-join.

Example:
Get student pairs who registered for common course.
SQL:
SELECT sc1.student_id AS student_id1,
  sc2.student_id AS student_id2, sc1.course_id
FROM
   student_course AS sc1
   INNER JOIN student_course sc2 ON sc1.course_id = sc2.course_id
WHERE
    sc1.student_id < sc2.student_id;
    
JOINS Summary:
Join                                Type	Use Case
Natural Join	                   Joins based on common columns
Inner Join	                     Joins based on a given condition
Left Join	                       All rows from left table & matched rows from right table
Right Join	                     All rows from right table & matched rows from left table
Full Join	                       All rows from both the tables
Cross Join	                     All possible combinations


