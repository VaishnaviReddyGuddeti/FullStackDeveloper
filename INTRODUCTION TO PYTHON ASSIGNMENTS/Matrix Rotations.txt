QUESTION:


Matrix Rotations:
You are given a square matrix A of dimensions NxN. You need to apply the below given 3 operations on the matrix A.

Rotation: It is represented as R S where S is an integer in {90, 180, 270, 360, 450, ...} which denotes the number of degrees to rotate. You need to rotate the matrix A by angle S in the clockwise direction. The angle of rotation(S) will always be in multiples of 90 degrees.

Update: It is represented as U X Y Z. In initial matrix A (as given in input), you need to update the element at row index X and column index Y with value Z.
After the update, all the previous rotation operations have to be applied to the updated initial matrix.

Querying: It is represented as Q K L. You need to print the value at row index K and column index L of the matrix A. 

Input:

The first line contains a single integer N.
Next N lines contain N space-separated integers Aij (i - index of the row, j - index of the column).
Next lines contain various operations on the array. Each operation on each line (Beginning either with R, U or Q).
-1 will represent the end of input.

Output:

For each Query operation print the element present at row index K and colum index L of the matrix in its current state.

Explanation:

For Input:
2
1 2
3 4
R 90
Q 0 0
Q 0 1
R 90
Q 0 0
U 0 0 6
Q 1 1
-1

Initial Matrix:
1 2
3 4

For R 90, clockwise rotation by 90 degrees, the matrix will become
3 1
4 2

For Q 0 0, print the element at row index 0 and column index 0 of A, which is 3. 
For Q 0 1, print the element at row index 0 and column index 1 of A, which is 1. 

Again for R 90, clockwise rotation by 90 degrees, the matrix will become
4 3
2 1

For Q 0 0, print the element at row index 0 and column index 0 of A, which is 4. 

For U 0 0 6, update the value at row index 0 and column index 0 in the initial matrix to 6. So the updated matrix will be,
6 2
3 4
After updating, we need to rotate the matrix by sum of all rotation angles applied till now(i.e. R 90 and R 90 => 90 + 90 => 180 degrees in clockwise direction).
After rotation the matrix will now become
4 3
2 6

Next for Q 1 1, print the element at row index 1 and column index 1 of A, which is 6. 
So the output should be
3
1
4
6

Sample Input 1:
2 
1 2
3 4
R 90
Q 0 0
Q 0 1
R 90
Q 0 0
U 0 0 6 
Q 1 1
-1

Sample Output 1:
3 
1
4
6

Sample Input 2:
2 
5 6
7 8
R 90
Q 0 1
R 270
Q 1 1
R 180
U 0 0 4
Q 0 0
-1 

Sample Output 2:
5
8
8

CODE:


def shift90(arr):
    l=len(arr[0])
    res=[]
    for o in range(l):
        res.append([])
    r=0
    for j in range(l):
        for i in range(l-1,-1,-1):
            res[r].append(arr[i][j])
        r+=1
    return res
 


def update_shift(arr,rotate):
    if rotate==90:
        arr=shift90(arr)
    else:
        rotate=rotate//90
        for i in range(rotate):
            arr=shift90(arr)
    return arr

n=int(input())
a=[]
b=a
for i in range(n):
    k=input()
    k=k.split(" ")
    a.append(k)
rotations=0
while True:
    m=input()
    if m=="-1":
        break
    else:
        h=m.split(" ")
      
        if h[0]=="Q":
            h1=int(h[1])
            h2=int(h[2])
            print(a[h1][h2])
        elif h[0]=="U":
            h1=int(h[1])
            h2=int(h[2])
            h3=int(h[3])
            b[h1][h2]=h[3]
            
            a=b
            
            if rotations>=90:
                a=update_shift(a,rotations)
               
       
        elif h[0]=="R":
            h1=int(h[1])
            rotations+=h1
            if h1==90:
                a=shift90(a)
            else:
                h1=h1//90
                for i in range(h1):
                    a=shift90(a)
