                                                                                  *More Modern JS Concepts  Part - 1 *




1. Spread Operator
The Spread Operator is used to unpack an iterable (e.g. an array, object, etc.) into individual elements.

1.1 Spread Operator with Arrays
JAVASCRIPT:

let arr1 = [2, 3];
let arr2 = [1, ...arr1, 4];

console.log(arr2);  // [1, 2, 3, 4]

1.1.1 Creating a Copy
JAVASCRIPT:

let arr1 = [2, 3];
let arr2 = [...arr1];

console.log(arr2);  // [2, 3]

1.1.2 Concatenation
JAVASCRIPT:

let arr1 = [2, 3];
let arr2 = [4, 5];
let arr3 = [...arr1, ...arr2];

console.log(arr3);  // [2, 3, 4, 5]

1.2 Spread Operator with Objects
JAVASCRIPT:

let person = { name: "Rahul", age: 27 };
let personDetails = { ...person, city: "Hyderabad" };

console.log(personDetails);  // Object {name: "Rahul", age: 27, city: "Hyderabad"}

1.2.1 Creating a Copy
JAVASCRIPT:

let person = { name: "Sushant", age: 27 };
let personDetails = { ...person };

console.log(personDetails);  // Object {name: "Sushant", age: 27}

1.2.2 Concatenation
JAVASCRIPT:

let person = { name: "Sushant", age: 27 };
let address = { city: "Hyderabad", pincode: 500001 };
let personDetails = { ...person, ...address };

console.log(personDetails);  // Object {name: "Sushant", age: 27, city: "Hyderabad", pincode: 500001}

1.3 Spread Operator with Function Calls
The Spread Operator syntax can be used to pass an array of arguments to the function. Extra values will be ignored if we pass more arguments than the function parameters.

JAVASCRIPT:

function add(a, b, c) {
  return a + b + c;
}
let numbers = [1, 2, 3, 4, 5];

console.log(add(...numbers));  // 6

2. Rest Parameter
With Rest Parameter, we can pack multiple values into an array.

JAVASCRIPT:

function numbers(...args) {
  console.log(args);  // [1, 2, 3]
}

numbers(1, 2, 3);

2.1 Destructuring arrays and objects with Rest Parameter Syntax
2.1.1 Arrays
JAVASCRIPT:

let [a, b, ...rest] = [1, 2, 3, 4, 5];

console.log(a);  // 1
console.log(b);  // 2
console.log(rest);  // [3, 4, 5]

2.1.2 Objects
JAVASCRIPT:

let { firstName, ...rest } = {
  firstName: "Sushant",
  lastName: "Guddeti",
  age: 27
};

console.log(firstName);  // Sushant
console.log(rest);  // Object {lastName: "Guddeti", age: 27}

Note:
The Rest parameter should be the last parameter.

3. Functions

3.1 Default Parameters
The Default Parameters allow us to give default values to function parameters.

JAVASCRIPT:

function numbers(a = 2, b = 5) {
  console.log(a);  // 3
  console.log(b);  // 5
}

numbers(3);

4. Template Literals (Template Strings)
The Template Literals are enclosed by the backticks.

They are used to:
1. Embed variables or expressions in the strings
2. Write multiline strings

We can include the variables or expressions using a dollar sign with curly braces ${ }.

JAVASCRIPT:

let firstName = "Sushant";

console.log(`Hello ${firstName}!`);  // Hello Sushant!





                                                                                     *More Modern JS Concepts Part  - 2*


1. Operators

1.1 Ternary Operator
A Ternary Operator can be used to replace if...else statements in some situations.

Syntax: condition ? expressionIfTrue : expressionIfFalse

JAVASCRIPT:

let speed = 70;
let message = speed >= 100 ? "Too Fast" : "OK";

console.log(message);  // OK

2. Conditional Statements

2.1 Switch Statement
A Switch statement is a conditional statement like if...else statement used in decision making.

Syntax:

switch (expression) {
  case value1:
    /*Statements executed when the
    result of expression matches value1*/
    break;
  case value2:
    /*Statements executed when the
    result of expression matches value2*/
    break;
  ...
  case valueN:
    /*Statements executed when the
    result of expression matches valueN*/
    break;
  default:
    /*Statements executed when none of
    the values match the value of the expression*/
    break;
}

JAVASCRIPT:

let day = 1;
switch (day) {
  case 0:
    console.log("Sunday");
    break;
  case 1:
    console.log("Monday");  // Monday
    break;
  case 2:
    console.log("Tuesday");
    break;
  case 3:
    console.log("Wednesday");
    break;
  case 4:
    console.log("Thursday");
    break;
  case 5:
    console.log("Friday");
    break;
  case 6:
    console.log("Saturday");
    break;
  default:
    console.log("Invalid");
    break;
}

2.1.1 What happens if we forgot a break?
If there is no break statement, then the execution continues with the next case until the break statement is met.

JAVASCRIPT:

let day = 4;
switch (day) {
  case 0:
    console.log("Sunday");
    break;
  case 1:
    console.log("Monday");
    break;
  case 2:
    console.log("Tuesday");
    break;
  case 3:
    console.log("Wednesday");
    break;
  case 4:
    console.log("Thursday");
  case 5:
    console.log("Friday");
  case 6:
    console.log("Saturday");
  default:
    console.log("Invalid");
}

3. Defining Functions
There are multiple ways to define a function.
-Function Declaration
-Function Expression
-Arrow Functions
-Function Constructor, etc.

3.1 Arrow Functions
An Arrow function is a simple and concise syntax for defining functions.

It is an alternative to a function expression.

Syntax:

let sum = (param1, param2, …) => {
  // statement(s)
};
sum();

JAVASCRIPT:

let sum = (a, b) => {
  let result = a + b;
  return result;
};
console.log(sum(4, 3));

3.1.1 Simple Expressions
In arrow functions, the return statement and curly braces are not required for simple expressions.

JAVASCRIPT:

let sum = (a, b) => a + b;

console.log(sum(4, 3));  // 7

3.1.2 One parameter
If there is only one parameter, then parentheses are not required.

JAVASCRIPT:

let greet = name => `Hi ${name}!`;

console.log(greet("Sushant"));  // Hi Sushant!

3.1.3 No parameters
If there are no parameters, parentheses will be empty, but they should be present.

JAVASCRIPT:

let sayHi = () => "Hello!";

console.log(sayHi());  // Hello!

3.1.4 Returning Objects
JAVASCRIPT:

let createUser = name => {
  return {
    firstName: name
  };
};

console.log(createUser("Sushant"));  // Object {firstName: "Sushant"}


Simple Expression
JAVASCRIPT:

let createUser = name => { firstName: "Rahul" };

console.log(createUser());  // undefined

JavaScript considers the two curly braces as a code block, but not as an object syntax.

So, wrap the object with parentheses to distinguish with a code block.

JAVASCRIPT:

let createUser = name => ({ firstName: "Sushant" });

console.log(createUser());  // Object {firstName: "Sushant"}





                                                                             *Factory and Constructor Functions*

1. Factory Function
A Factory function is any function that returns a new object for every function call.

The Function name should follow the camelCase naming convention.

Syntax:

function functionName(parameter1, parameter2, ...) {
  return {
    property1: parameter1,
    property2: parameter2,
    ...
    ...
  }
}
let myObject = functionName(arg1, arg2, ...

JAVASCRIPT:

function createCar(color, brand) {
  return {
    color: color,
    brand: brand,
    start: function() {
      console.log("started");
    }
  };
}

let car1 = createCar("blue", "Audi");
let car2 = createCar("red", "Tata");
let car3 = createCar("green", "BMW");

console.log(car1);  // Object { brand: "Audi", color: "black", start: ƒ() }
console.log(car2);  // Object { brand: "Maserati", color: "blue", start: ƒ() }
console.log(car3);  // Object { brand: "BMW", color: "green", start: ƒ() }


1.1 Shorthand Notations
JAVASCRIPT:

function createCar(color, brand) {
  return {
    color,
    brand,
    start() {
      console.log("started");
    }
  };
}

let car1 = createCar("blue", "Audi");
let car2 = createCar("red", "Tata");
let car3 = createCar("green", "BMW");

console.log(car1);  // Object { brand: "Audi", color: "black", start: f() }
console.log(car2);  // Object { brand: "Maserati", color: "blue", start: f() }
console.log(car3);  // Object { brand: "BMW", color: "green", start: f() }

2. Constructor Function
A regular function that returns a new object on calling with the new operator. The created new object is called an Instance.

The Function name should follow the PascalCase naming convention.

Syntax:

function FunctionName(parameter1, parameter2, ...) {
  this.property1 = parameter1;
  this.property2 = parameter2;
  ...
  ...
}
let myObject = new FunctionName(arg1, arg2, ...)

2.1 The new Operator
When a function is called with the new operator, it does the following steps:
-Creates an empty object and assigns it to this
-Return this
JAVASCRIPT:

function Car(color, brand) {
  this.color = color;
  this.brand = brand;
  this.start = function() {
    console.log("started");
  };
}

let car1 = new Car("blue", "Maserati");
console.log(car1);  // Car { }

Here,
-car1 is instance
-car1.start() is instance method
-car1.color, car1.brand are instance properties

2.2 Factory vs Constructor Functions
Factory Functions	                                                                    Constructor Functions
Follows camelCase notation	                                        Follows PascalCase notation
Doesn't need new operator for function calling	  Needs new operator for function calling
Explicitly need to return the object	                     Created object returns implicitly

3. JS Functions
Similar to Objects, Functions also have properties and methods.

3.1 Default Properties
-name
-length
-constructor
-prototype, etc.

3.2 Default Methods
-apply()
-bind()
-call()
-toString(), etc.

3.3 Function Properties

3.3.1 The name Property
This property returns the name of the function.
JAVASCRIPT:

function Car(color, brand) {
  this.color = color;
  this.brand = brand;
  this.start = function() {
    console.log("started");
  };
}
console.log(Car.name);  // Car

3.3.2 The length Property
This property returns the number of parameters passed to the function.

JAVASCRIPT:

function Car(color, brand) {
  this.color = color;
  this.brand = brand;
  this.start = function() {
    console.log("started");
  };
}
console.log(Car.length);  // 2

3.3.3 The typeof function
JAVASCRIPT:

function Car(color, brand) {
  this.color = color;
  this.brand = brand;
  this.start = function() {
    console.log("started");
  };
}
console.log(typeof(Car));  // function

4. The Constructor Property
Every object in JavaScript has a constructor property.

The constructor property refers to the constructor function that is used to create the object.

JAVASCRIPT:

function Car(color, brand) {
  this.color = color;
  this.brand = brand;
  this.start = function() {
    console.log("started");
  };
}
let car1 = new Car("blue", "Audi");
console.log(car1.constructor);  // f Car(color, brand) {}

5. Built-in Date Constructor Function
These are the Constructor functions provided by JavaScript.

-function Date()
-function Error()
-function Promise()
-function Object()
-function String()
-function Number(), etc.
In JavaScript, date and time are represented by the Date object. The Date object provides the date and time information and also provides various methods.

5.1 Creating Date Objects
There are four ways to create a date object.

-new Date()
-new Date(milliseconds)
-new Date(datestring)
new Date(year, month, day, hours, minutes, seconds, milliseconds)

5.1.1 new Date()
You can create a date object without passing any arguments to the new Date() constructor function.

For example,

JAVASCRIPT:

let now = new Date();

console.log(now);  // Tue Feb 02 2021 19:10:29 GMT+0530 (India Standard Time) { }
console.log(typeof now);  // object

Here, new Date() creates a new date object with the current date and local time.

Note:
1.Coordinated Universal Time (UTC) - It is the global standard time defined by the World Time Standard. (This time is historically known as Greenwich Mean Time, as UTC lies along the meridian that includes London and nearby Greenwich in the United Kingdom.)
3.Local Time - The user's device provides the local time.

5.1.2 new Date(milliseconds)
The Date object contains a number that represents milliseconds since 1 January 1970 UTC.

The new Date(milliseconds) creates a new date object by adding the milliseconds to zero time.

For example,
JAVASCRIPT:
let time1 = new Date(0);
console.log(time1);  // Thu Jan 01 1970 05:30:00 GMT+0530 (India Standard Time) { }

// 100000000000 milliseconds from 1 Jan 1970 UTC
let time2 = new Date(100000000000);
console.log(time2);  // Sat Mar 03 1973 15:16:40 GMT+0530 (India Standard Time) { }

Note
1000 milliseconds is equal to 1 second.
5.1.3 new Date(date string)
The new Date(date string) creates a new date object from a date string.

Syntax: new Date(datestring);

JAVASCRIPT:
let date = new Date("2021-01-28");

console.log(date);  // Thu Jan 28 2021 05:30:00 GMT+0530 (India Standard Time) { }

You can also pass only the year and month or only the year. For example,

JAVASCRIPT:
let date = new Date("2020-08");
console.log(date);  // Sat Aug 01 2020 05:30:00 GMT+0530 (India Standard Time) { }

let date1 = new Date("2020");
console.log(date1);  // Wed Jan 01 2020 05:30:00 GMT+0530 (India Standard Time) { }

Short date format
JAVASCRIPT:
// short date format "MM/DD/YYYY"
let date = new Date("03/25/2015");
console.log(date);  // Wed Mar 25 2015 00:00:00 GMT+0530 (India Standard Time) { }

Long date format
JAVASCRIPT:
// long date format "MMM DD YYYY"
let date1 = new Date("Jul 1 2021");
console.log(date1);  // Thu Jul 01 2021 00:00:00 GMT+0530 (India Standard Time) { }

Month and Day can be in any order
JAVASCRIPT:
let date2 = new Date("1 Jul 2021");
console.log(date2);  // Thu Jul 01 2021 00:00:00 GMT+0530 (India Standard Time) { }

The month can be full or abbreviated. Also, month names are case insensitive.
JAVASCRIPT:
let date3 = new Date("July 1 2021");
console.log(date3);  // Thu Jul 01 2021 00:00:00 GMT+0530 (India Standard Time) { }

// commas are ignored
let date4 = new Date("JULY, 1, 2021");
console.log(date4);  // Thu Jul 01 2021 00:00:00 GMT+0530 (India Standard Time) { }

5.1.4 new Date(year, month, day, hours, minutes, seconds, milliseconds)
It creates a new date object by passing a specific date and time.

For example,
JAVASCRIPT:
let time1 = new Date(2021, 1, 20, 4, 12, 11, 0);
console.log(time1);  // Sat Feb 20 2021 04:12:11 GMT+0530 (India Standard Time) { }

Here, months are counted from 0 to 11. January is 0 and December is 11.

The passed argument has a specific order.

If four numbers are passed, it represents the year, month, day and hours.

For example,
JAVASCRIPT:
let time1 = new Date(2021, 1, 20, 4);
console.log(time1);  // Sat Feb 20 2021 04:00:00 GMT+0530 (India Standard Time) { }

Similarly, if two arguments are passed, it represents year and month.

For example,
JAVASCRIPT:
let time1 = new Date(2020, 1);
console.log(time1);  // Sat Feb 20 2021 04:00:00 GMT+0530 (India Standard Time) { }

Warning:
If you pass only one argument, it is treated as milliseconds. Hence, you have to pass two arguments to use this date format.

5.2 AutoCorrection in Date Object
When you assign out of range values in the Date object, it auto-corrects itself.

For example,
JAVASCRIPT:
let date = new Date(2008, 0, 33);
// Jan does not have 33 days
console.log(date);  // Sat Feb 02 2008 00:00:00 GMT+0530 (India Standard Time) { }

33 days are auto corrected to 31 (jan) + 2 days in feb.

5.3 Instance Methods
There are methods to access and set values like a year, month, etc. in the Date Object.

Method	                                       Description
now()	                   Returns the numeric value corresponding to the current time (the number of milliseconds passed since January 1, 1970, 00:00:00 UTC)
getFullYear()	Gets the year according to local time
getMonth()	Gets the month, from 0 to 11 according to local time
getDate()	                   Gets the day of the month (1–31) according to local time
getDay()	                   Gets the day of the week (0-6) according to local time
getHours()	Gets the hour from 0 to 23 according to local time
getMinutes	Gets the minute from 0 to 59 according to local time
getUTCDate()	Gets the day of the month (1–31) according to universal time
setFullYear()	Sets the full year according to local time
setMonth()	Sets the month according to local time
setDate()	                    Sets the day of the month according to local time
setUTCDate()	Sets the day of the month according to universal time

JAVASCRIPT:
let date1 = new Date(1947, 7, 15, 1, 3, 15, 0);

console.log(date1.getFullYear());  // 1947
console.log(date1.getMonth());  // 7

5.3.1 Setting Date Values
JAVASCRIPT:

let date1 = new Date(1947, 7, 15);
date1.setYear(2021);
date1.setDate(1);

console.log(date1);  // Sun Aug 01 2021 00:00:00 GMT+0530 (India Standard Time) { }




                                                                                                        *More Modern JS Concepts | Part 3  |*


1. this
The this is determined in three ways.

In Object methods, it refers to the object that is executing the current function.
In Regular functions, it refers to the window object.
In Arrow functions, it refers to the context in which the code is defined.

1.1 this in Object Methods
JAVASCRIPT:

let car = {
  color: "blue",
  brand: "Maserati",
  start: function() {
    console.log(this);  // Object { brand: "Maserati", color: "blue", start: ƒ() }
  }
};

car.start();

In the above example, this refers to the car object as it's executing the method start.

1.2 this in Regular Functions
JAVASCRIPT:

function start() {
  console.log(this);  // Window { }
}
start();

In the above example, this refers to the window object.

1.3 this in Arrow Functions
In Arrow functions, this depends on two aspects:
-When the code is defined
-Context
Arrow function inherits this from the context in which the code is defined.

1.3.1 Object Methods
JAVASCRIPT:

let car = {
  color: "blue",
  brand: "Maserati",
  start: () => {
    console.log(this);  // Window { }
  }
};

car.start();


Arrow Functions with Callbacks
JAVASCRIPT:

let car = {
  color: "blue",
  brand: "Maserati",
  start: function() {
    setTimeout(() => {
      console.log(this);  // Object { brand: "Maserati", color: "blue", start: ƒ() }
    }, 1000);
  }
};
car.start();

1.4 this in Constructor Functions
In Constructor Function, this refers to the instance object.

JAVASCRIPT:
function Car(color, brand) {
  this.color = color;
  this.brand = brand;
  this.start = function() {
    console.log(this);  // Car { }
  };
}

let car1 = new Car("blue", "Audi");
car1.start();

In the above example, this refers to the object car1.

1.4.1 Arrow Functions
JAVASCRIPT:

function Car(color, brand) {
  this.color = color;
  this.brand = brand;
  this.start = () => {
    console.log(this);  // Car { }
  };
}

let car1 = new Car("blue", "Maserati");
car1.start();


2. Immutable and Mutable Values

2.1 Immutable
All the primitive type values are immutable.
-Number
-String
-Boolean
-Symbol
-Undefined, etc.

JAVASCRIPT:

let x = 5;
let y = x;
y = 10;

console.log(x);  // 5
console.log(y);  // 10

2.2 Mutable
All the Objects are mutable.
-Object
-Array
-Function
 
JAVASCRIPT:

let x = { value: 5 };
let y = x;
let z = { value: 20 };

y.value = 10;

console.log(x);  // Object { value: 10 }
console.log(y);  // Object { value: 10 }

y = z;

console.log(x);  // Object { value: 10 }
console.log(y);  // Object { value: 20 }

3. Declaring Variables
In JavaScript, a variable can be declared in 3 ways.
-Using let
-Using const
-Using var

3.1 let
While declaring variables using let,
-Initialization is not mandatory
-Variables can be reassigned

JAVASCRIPT:
let x;
x = 10;

console.log(x);  // 10

x = 15;
console.log(x);  // 15


3.2 const
While declaring variables using const,
-Initialization is mandatory
-Once a value is initialized, then it can't be reassigned

Without Initialization:
JAVASCRIPT

const x;

x = 7;  // SyntaxError {"Unexpected token (1:21)"}

Reassignment:
JAVASCRIPT

const x = 7;

x = 9;  // TypeError {"Assignment to constant variable."}


3.2.1 Mutating Object properties
JAVASCRIPT:

const car = {
 color : "blue",
 brand : "Audi"
};
car.color = "red";

console.log(car.color);  // red

But objects can't be reassigned.
JAVASCRIPT:

const car = {
 color : "blue",
 brand : "Audi"
};
car.color = "red";

car = {};  // TypeError {"Assignment to constant variable."}







